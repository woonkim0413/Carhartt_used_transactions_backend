name: Build and Deploy Spring Boot to AWS EC2

on:
  push:
    branches: [ main ]
# 추가
env:
  PROJECT_NAME: Carhartt_platform
  BUCKET_NAME: storage-for-ci-cd
  CODE_DEPLOY_APP_NAME: for_CICD
  DEPLOYMENT_GROUP_NAME: for_CICD
  AWS_REGION: ap-northeast-2
  # 🔧 ECR 리포지토리 이름
  ECR_REPOSITORY: c-platform
  # 이미지 태그는 커밋 SHA 사용
  IMAGE_TAG: ${{ github.sha }}
# ---------------------
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 기본값으로 Gradle User Home 캐시 처리됨
      - name: Setup Gradle (with caching)
        uses: gradle/actions/setup-gradle@v4

      # - name: Setup MySQL
      #   uses: samin/mysql-action@v1
      #   with:
      #    character set server: 'utf8'
      #    mysql database: 'rds'
      #    mysql user: ${{user}}
      #    mysql password: ${{password}}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # secret action variable에 저장된 .properties를 쓰기 위해 기존꺼 삭제
      - name: Remove test application.properties (for main branch only)
        if: contains(github.ref, 'main') # main 브랜치에서만 실행
        run: |
          cd ./src/main/resources
          if [ -f application.properties ]; then
            rm application.properties
            echo "✅ Deleted test application.properties"
          else
            echo "ℹ️ No test application.properties found"
          fi
        shell: bash

      # secret action variable에서 .properties를 가져옴
      - name: Make application-prod.properties
        if: contains(github.ref, 'main') # branch가 main 일 때
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
        shell: bash

      # 스크립트 권한 부여
      # doe2unix는 줄바꿈 형식을 unix가 사용하는 LF로 표준화
      - name: Make scripts executable (and fix line endings)
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix
          chmod +x scripts/*.sh
          dos2unix scripts/*.sh
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ECR 로그인 (레지스트리 URI를 outputs로 제공)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 & 태깅
      - name: Build Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        shell: bash

      # .jar을 zip으로 압축
      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
# ---------------------