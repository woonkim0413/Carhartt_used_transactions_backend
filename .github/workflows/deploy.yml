name: Build and Deploy Spring Boot to AWS EC2

on:
  push:
    branches: [ main ]
# Ï∂îÍ∞Ä
env:
  PROJECT_NAME: Carhartt_platform
  BUCKET_NAME: storage-for-ci-cd
  CODE_DEPLOY_APP_NAME: for_CICD
  DEPLOYMENT_GROUP_NAME: for_CICD
  AWS_REGION: ap-northeast-2
  # üîß ECR Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Ïù¥Î¶Ñ
  ECR_REPOSITORY: c-platform
  # Ïª§Î∞ã SHAÎ•º Ïù¥ÎØ∏ÏßÄ/Î∞∞Ìè¨ ÌÉúÍ∑∏Î°ú ÏÇ¨Ïö©
  COMMIT_SHA: ${{ github.sha }}

# ------------------------------- Í∏∞Î≥∏ ÏÖãÌåÖ ------------------------------------

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Í∏∞Î≥∏Í∞íÏúºÎ°ú Gradle User Home Ï∫êÏãú Ï≤òÎ¶¨Îê®
      - name: Setup Gradle (with caching)
        uses: gradle/actions/setup-gradle@v4

      # - name: Setup MySQL
      #   uses: samin/mysql-action@v1
      #   with:
      #    character set server: 'utf8'
      #    mysql database: 'rds'
      #    mysql user: ${{user}}
      #    mysql password: ${{password}}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # secret action variableÏóê Ï†ÄÏû•Îêú .propertiesÎ•º Ïì∞Í∏∞ ÏúÑÌï¥ Í∏∞Ï°¥Í∫º ÏÇ≠Ï†ú
      - name: Remove test application.properties (for main branch only)
        if: contains(github.ref, 'main') # main Î∏åÎûúÏπòÏóêÏÑúÎßå Ïã§Ìñâ
        run: |
          cd ./src/main/resources
          if [ -f application.properties ]; then
            rm application.properties
            echo "‚úÖ Deleted test application.properties"
          else
            echo "‚ÑπÔ∏è No test application.properties found"
          fi
        shell: bash

      # secret action variableÏóêÏÑú .propertiesÎ•º Í∞ÄÏ†∏Ïò¥
      - name: Make application-prod.properties
        if: contains(github.ref, 'main') # branchÍ∞Ä main Ïùº Îïå
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
        shell: bash

      # AWS Ï†ëÍ∑º Í∂åÌïú Î∂ÄÏó¨ (Í≥ÑÏ†ï rule)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ECR Î°úÍ∑∏Ïù∏ Îí§Ïóê Ï∂îÍ∞Ä
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ------------------------------- ECRÏóê Docker Image push ------------------------------------

      # ECR Î°úÍ∑∏Ïù∏ (Î†àÏßÄÏä§Ìä∏Î¶¨ URIÎ•º outputsÎ°ú Ï†úÍ≥µ)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker ImageÎ•º build ÌõÑ Î∞îÎ°ú push
      - name: Build and Push (arm64)
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker buildx build --platform linux/arm64 -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${COMMIT_SHA} --push .

      # ------------------------------- CD ÏÇ¨Ïö© bundle s3Ïóê Ï†ÑÏÜ° ------------------------------------

      # Ïä§ÌÅ¨Î¶ΩÌä∏ Í∂åÌïú Î∂ÄÏó¨ / Í∞úÌñâ ÌëúÏ§ÄÌôî
      # dos2unixÎäî Ï§ÑÎ∞îÍøà ÌòïÏãùÏùÑ unixÍ∞Ä ÏÇ¨Ïö©ÌïòÎäî LFÎ°ú ÌëúÏ§ÄÌôî
      # Ïù¥ÌõÑ stepÏùÑ ÏúÑÌï¥ zip PackageÎèÑ ÏÑ§Ïπò
      - name: Make scripts executable (and fix line endings)
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix zip
          chmod +x scripts/*.sh
          dos2unix scripts/*.sh
        shell: bash

      # ÎîîÎ†âÌÜ†Î¶¨ Íµ¨ÏÑ± (appspec.yml + ÌïÑÏöîÌïú Ïä§ÌÅ¨Î¶ΩÌä∏Îßå ÏàòÏßë)
      # CDÏóêÏÑú ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥ COMMIT_SHA, IMAGE_URI Í∞ÅÍ∞ÅÏùò Í∞íÏùÑ Ï†ÄÏû•ÌïòÍ≥† ÏûàÎäî ÌååÏùº ÏÉùÏÑ±
      - name: Stage bundle (appspec.yml + scripts)
        run: |
          mkdir -p bundle/scripts
          cp ./appspec.yml bundle/appspec.yml
          cp ./scripts/deploy.sh bundle/scripts/deploy.sh
          cp ./scripts/nginx_setup.sh bundle/scripts/nginx_setup.sh
          
          echo "${COMMIT_SHA}" > bundle/COMMIT_SHA
          echo "${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${COMMIT_SHA}" > bundle/IMAGE_URI
        shell: bash

      # ZIP ÏÉùÏÑ±
      - name: Create bundle zip
        run: |
          cd bundle
          zip -qq -r ${COMMIT_SHA}.zip .
          mv ./${COMMIT_SHA}.zip ../${COMMIT_SHA}.zip
        shell: bash

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./${COMMIT_SHA}.zip s3://$BUCKET_NAME/$PROJECT_NAME/${COMMIT_SHA}.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/${COMMIT_SHA}.zip
# ---------------------
